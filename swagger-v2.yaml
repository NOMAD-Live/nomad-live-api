# this is a draft of the NOMAD Live API
swagger: '2.0'
info:
  title: NOMAD Live API
  description: 'Share the action, be the motion.'
  version: '1.0.0'
# Domain of the service
host: localhost:8000
# Array of all schemes that the API supports
schemes:
  - https
  - http
# Prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:


  /users:
    post:
      summary: Create New User
      description: |
        Endpoint to create/fetch users
      parameters:

        - name: username
          in: query
          description: Username of the new user.
          required: true
          type: string

        - name: password
          in: query
          description: Password associated to the new user.
          required: true
          type: string
          format: password

        - name: display_name
          in: query
          description: A user friendly name for the new user.
          required: false
          type: string

        - name: email
          in: query
          description: Email address of the new user.
          required: false
          type: string

        - name: extra_info
          in: query
          description: Some more info as `json`.
          required: false
          type: string

      tags:
        - Users
      responses:
        201:
          description: A User object including the user_id.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: User Informations List
      description: |
        Get information on existing users.
        Needs at least a username or a user_id.
      parameters:

        - name: username
          in: query
          description: Usernames of the requested users.
          required: false
          type: array
          items:
            type: string

        - name: user_id
          in: query
          description: IDs of the requested users.
          required: false
          type: array
          items:
            type: string

      tags:
        - Users
      responses:
        200:
          description: An array of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /users/{user_id}:
    get:
      summary: User Informations
      description: |
        Get information of an existing user.
        Needs a user_id.
      parameters:

        - name: user_id
          in: path
          description: ID of the requested user.
          required: true
          type: string

      tags:
        - Users
      responses:
        201:
          description: A User object including the user_id.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /users/{user_id}/streams:
    get:
      summary: User's Streams
      description: |
        Get streams of the matching user.
      parameters:

        - name: user_id
          in: path
          description: ID of the requested user.
          required: true
          type: string

        - name: page
          in: query
          description: Page to get from the requested query.
          required: false
          type: integer

        - name: fields
          in: query
          description: Specify fields to return in the reply.
          required: false
          type: string

        - name: sort
          in: query
          description: Specify how to sort the reply.
          required: false
          type: string

      tags:
        - Streams
        - Users
      responses:
        200:
          description: An array of streams.
          schema:
            $ref: '#/definitions/Streams'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /search/users:
    get:
      summary: User Search
      description: |
        Get users and streams matching the query.
        Needs at least a username or a user_id.
      parameters:

        - name: q
          in: query
          description: Query the user should match.
          required: false
          type: string

        - name: page
          in: query
          description: Page to get from the requested query.
          required: false
          type: integer

        - name: fields
          in: query
          description: Specify fields to return in the reply.
          required: false
          type: string

        - name: sort
          in: query
          description: Specify how to sort the reply.
          required: false
          type: string

      tags:
        - Users
      responses:
        200:
          description: An array of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /users/{user_id}/report_spam:
    get:
      summary: Flag User for Spam
      description: |
        Allows flagging of a user for spam.
        Needs at least a username or a user_id.
      parameters:

        - name: username
          in: query
          description: Usernames of the requested user.
          required: false
          type: string

        - name: user_id
          in: path
          description: IDs of the requested user.
          type: string

      tags:
        - Users
      responses:
        200:
          description: A user object of the flagged user.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /streams:
    post:
      summary: Create a New Stream
      description: |
        Blabla.
      parameters:

        - name: name
          in: query
          description: Friendly Name of the new stream.
          required: false
          type: string

        - name: description
          in: query
          description: A friendly description of the new stream.
          required: false
          type: string

        - name: tags
          in: query
          description: A csv array of tags relevant to the stream.
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string

        - name: lat
          in: query
          description: Latitude at which the stream started.
          required: false
          type: number

        - name: lon
          in: query
          description: Longitude at which the stream started.
          required: false
          type: number

        - name: extra_info
          in: query
          description: Some more info as `json`.
          required: false
          type: string

      tags:
        - Streams
      responses:
        201:
          description: A User object including the user_id.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Stream Informations List
      description: |
        Get information on existing streams.
        Needs at least a username, a user_id, or a stream_id.
      parameters:

        - name: username
          in: query
          description: Usernames of the requested users to fetch the streams from (csv).
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string

        - name: user_id
          in: query
          description: IDs of the requested users to fetch the streams from (csv).
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string

        - name: stream_id
          in: query
          description: IDs of the requested streams (csv).
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string

      tags:
        - Streams
      responses:
        200:
          description: An array of users.
          schema:
            $ref: '#/definitions/Users'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /streams/{stream_id}/location:
    put:
      summary: Geo Location List
      description: |
        A list of timestamped locations stored while
        the video is recorded.
      parameters:

        - name: stream_id
          in: path
          type: string
          description: Unique stream identifier.

        - name: lat
          in: query
          description: Latitude component of location.
          required: true
          type: number

        - name: lon
          in: query
          description: Longitude component of location.
          required: true
          type: number

        - name: time
          in: query
          type: string
          description: Timestamp of the geo-location (as per RFC3339).

      tags:
        - Geolocations
        - Streams
      responses:
        200:
          description: An array of geo-locations
          schema:
            type: array
            items:
              $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /search/streams:
    get:
      summary: Stream Search
      description: |
        Get streams matching the query.
        Uses the geo-location of the user if none.
      parameters:

        - name: q
          in: query
          description: Query the streams should match.
          allowEmptyValue: true
          required: true
          type: string

        - name: geo
          in: query
          description: Geo-location the streams should be close to.
          required: false
          type: string

        - name: page
          in: query
          description: Page to get from the requested query.
          required: false
          type: integer

        - name: fields
          in: query
          description: Specify fields to return in the reply.
          required: false
          type: string

        - name: sort
          in: query
          description: Specify how to sort the reply.
          required: false
          type: string

      tags:
        - Streams
      responses:
        200:
          description: An array of streams.
          schema:
            $ref: '#/definitions/Streams'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'



  /me:
    get:
      summary: User Profile
      description: The User Profile endpoint returns information about the user that has authorized with the application.
      tags:
        - Users
      responses:
        200:
          description: Profile information for a user
          schema:
            $ref: '#/definitions/Profile'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


definitions:

  Stream:
    properties:
      stream_id:
        type: string
        description: Unique identifier representing a specific stream.
      description:
        type: string
        description: Friendly description of stream.
      name:
        type: string
        description: Friendly display name of stream.
      rtmp_url:
        type: string
        description: RTMP url to view the stream.
      hls_url:
        type: string
        description: HLS url to view the stream.
      publish:
        type: string
        description: Image URL representing the product.
      record:
        type: boolean
        description: Wether or not to record the stream.
      live:
        type: boolean
        description: Wether or not the stream is live.

  User:
    properties:
      user_id:
        type: string
        description: Unique identifier representing a specific user.
      description:
        type: string
        description: Friendly description of the user.
      name:
        type: string
        description: Friendly display name of user.
      username:
        type: string
        description: Friendly username of user.
      streams:
        type: array
        items:
          $ref: '#/definitions/Stream'

  Profile:
    properties:
      first_name:
        type: string
        description: First name of the user.
      last_name:
        type: string
        description: Last name of the user.
      email:
        type: string
        description: Email address of the user.
      picture:
        type: string
        description: Image URL of the Uber user.
      promo_code:
        type: string
        description: Promo code of the Uber user.

  Streams:
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      streams:
        type: array
        items:
          $ref: '#/definitions/Stream'

  Users:
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      streams:
        type: array
        items:
          $ref: '#/definitions/User'

  Geolocation:
    properties:
      lat:
        type: number
        format: double
        description: Latitude component of location.
      lon:
        type: number
        format: double
        description: Longitude component of location.
      time:
        type: string
        format: dateTime
        description: Timestamp of the geo-location (as per RFC3339).
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

